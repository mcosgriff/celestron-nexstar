[project]
name = "celestron-nexstar"
version = "0.1.0"
description = "Python API for controlling Celestron NexStar 6SE telescopes via serial communication"
authors = [{email = "matthew@cosgriff.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.14"
keywords = ["telescope", "celestron", "nexstar", "astronomy", "serial"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.14",
    "Topic :: Scientific/Engineering :: Astronomy",
]
dependencies = [
    "pyserial>=3.5",
    "deal>=4.24.5",
    "tqdm>=4.66.0",
    "returns>=0.23.0",
    "typer[all]>=0.12.0",
    "rich>=13.7.0",
    "shellingham>=1.5.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "toml>=0.10.2",
    "fuzzysearch>=0.7.3",
    "pyyaml>=6.0.0",
    "cachetools>=5.3.0",
    "skyfield>=1.49",
    "geopy>=2.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "coverage[toml]>=7.6.0",
    "mypy>=1.8.0",
    "ruff>=0.14.3",
    "pre-commit>=4.0.0",
]

[project.scripts]
nexstar = "celestron_nexstar.cli.main:app"

[project.urls]
Homepage = "https://github.com/yourusername/celestron-nexstar"
Repository = "https://github.com/yourusername/celestron-nexstar"

[build-system]
requires = ["uv-build>=0.1.0"]
build-backend = "uv_build"

[tool.uv]
package = true

[tool.uv.sources]

[tool.uv-build]
# Include data files in the package
include = [
    "src/celestron_nexstar/cli/data/*.yaml",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--cov=celestron_nexstar",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/examples/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
# Set line length to match previous black configuration
line-length = 120
# Target Python 3.14+ (ruff config parser doesn't support py314 yet, using py313)
target-version = "py313"
# Exclude patterns
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "dist",
    "build",
]

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), isort (I), and more
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "RUF",   # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
]

[tool.ruff.lint.isort]
# Use black-compatible import sorting
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
# Use black-compatible formatting
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.14"
# Strict mode
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true

# Show error codes
show_error_codes = true
pretty = true

# Exclude patterns
exclude = [
    "tests/",
    "examples/",
]

# Plugins
plugins = [
    "returns.contrib.mypy.returns_plugin",
]

[dependency-groups]
dev = [
    "ruff>=0.8.4",
    "types-pyserial>=3.5.0.20251001",
]
